{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "baseUrl": ".", // import時root参照ができる
    "paths": {
      "@/*": ["./*"] //エイリアス
    },
    "noImplicitAny": true, //暗黙的にanyになる値をエラーにする
    "allowJs": true, // .jsと.jsxもコンパイル対象に含めるか
    "skipLibCheck": true, // *.d.ts ファイルに対する型チェックをスキップするか
    "esModuleInterop": true, // コンパイル時にヘルパーメソッドを作成するか
    "allowSyntheticDefaultImports": true, // コンパイルエラーを回避するか
    "strict": true,
    // --noImplicitAny　// 暗黙的にanyになる値をエラーにする
    // --noImplicitThis // thisの型が暗黙的にanyになる場合にエラーにする
    // --alwaysStrict // "use strict";を必ず全てのファイルの先頭行に付与するか
    // --strictBindCallApply　// bind, call, appslyを使用する際に、より厳密に型チェックするか
    // --strictNullChecks // Nullableな値に対してオプションの呼び出しを行う記述をエラーにするか
    // --strictFunctionTypes // 関数代入時の引数の型チェックにおいてContravariantlyに型チェックをするか
    // --strictPropertyInitialization // クラス定義時、インスタンス変数の初期化が宣言時、もしくはコンストラクタのどちらでも行われていない場合にエラーにするか
    "forceConsistentCasingInFileNames": true, // import時にファイルパスの文字列で大文字小文字を区別するかどうかを指定するか
    "noFallthroughCasesInSwitch": true, // switch文のcase内でbreakが無い場合1行以上処理が存在しているにも関わらず脱出処理（breakやreturn）が無いものにエラーにするか
    "module": "esnext", // 出力するjsのモジュールの仕組みとして何を使用するか
    "moduleResolution": "node", // tscのモジュール解決の方法を指定
    "resolveJsonModule": true, // JSONファイルから型の抽出・生成
    "isolatedModules": true, // コンパイル対象のファイル間の関係性を一切無視して、全てのファイルを単一のモジュールとしてコンパイル
    "noEmit": true, // trueにするとコンパイル結果を出力しなくなる
    "jsx": "preserve", // tsxファイルをjsxやjsにコンパイルする際の出力の形式を指定
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "lib/gtag.js"], // コンパイルする対象ファイルを記述
  "exclude": ["node_modules"]
}
